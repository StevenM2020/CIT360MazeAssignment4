        Queue<string> currentQueue1, currentQueue2, currentQueue3, currentQueue4, currentQueue5, currentQueue6;
        List<Queue<string>> queues = new List<Queue<string>>();
        int[] end = maze.getEndLocation();
        queue.Enqueue(current[0] + "," + current[1] + "," + current[2]);
        if (maze.BFSCheck(current[0] + 1, current[1], current[2]) && !queue.Contains((current[0] + 1)+ "," + current[1] + "," + current[2])) // x + 1
        {
            if (end[0] == current[0] + 1 && end[1] == current[1] && end[2] == current[2])
            {
                queue.Enqueue((current[0] +1) + "," + current[1] + "," + current[2]);
                return queue;
            }
            currentQueue1 = BFS(queue, new int[] { current[0] + 1, current[1], current[2] });
            if(currentQueue1.Count() > 0)
            {
                queues.Add(currentQueue1);
            }
        }
        if (maze.BFSCheck(current[0] -1, current[1], current[2]) && !queue.Contains(current[0] + "," + current[1] + "," + current[2])) // x - 1
        {
            if (end[0] == current[0] - 1 && end[1] == current[1] && end[2] == current[2])
            {
                queue.Enqueue((current[0] - 1) + "," + current[1] + "," + current[2]);
                return queue;
            }
            currentQueue2 = BFS(queue, new int[] { current[0] -1, current[1], current[2] });
            if (currentQueue2.Count() > 0)
            {
                queues.Add(currentQueue2);
            }
        }
        if (maze.BFSCheck(current[0], current[1] + 1, current[2]) && !queue.Contains(current[0] + "," + (current[1] + 1) + "," + current[2])) // y + 1
        {
            if (end[0] == current[0] && end[1] == current[1] + 1 && end[2] == current[2])
            {
                queue.Enqueue((current[0]) + "," + (current[1] + 1) + "," + current[2]);
                return queue;
            }
            currentQueue3 = BFS(queue, new int[] { current[0], current[1] + 1, current[2] });
            if (currentQueue3.Count() > 0)
            {
                queues.Add(currentQueue3);
            }
        }
        if (maze.BFSCheck(current[0], current[1] - 1, current[2]) && !queue.Contains(current[0] + "," + (current[1] - 1) + "," + current[2])) // y -1
        {
            if (end[0] == current[0] && end[1] == current[1] - 1 && end[2] == current[2])
            {
                queue.Enqueue((current[0]) + "," + (current[1] - 1) + "," + current[2]);
                return queue;
            }
            currentQueue4 = BFS(queue, new int[] { current[0], current[1] - 1, current[2] });
            if (currentQueue4.Count() > 0)
            {
                queues.Add(currentQueue4);
            }
        }
        if (maze.BFSCheck(current[0], current[1], current[2] + 1) && !queue.Contains(current[0] + "," + current[1] + "," + (current[2] + 1))) // z + 1
        {
            if (end[0] == current[0] && end[1] == current[1] && end[2] == current[2] + 1)
            {
                queue.Enqueue((current[0]) + "," + current[1] + "," + (current[2] + 1));
                return queue;
            }
            currentQueue5 = BFS(queue, new int[] { current[0], current[1], current[2] + 1 });
            if (currentQueue5.Count() > 0)
            {
                queues.Add(currentQueue5);
            }

        }
        if (maze.BFSCheck(current[0], current[1], current[2] - 1) && !queue.Contains(current[0] + "," + current[1] + "," + (current[2] - 1))) // z - 1
        {
            if (end[0] == current[0] && end[1] == current[1] && end[2] == current[2] - 1)
            {
                return queue;
            }
            currentQueue6 = BFS(queue, new int[] { current[0], current[1], current[2] - 1});
            if (currentQueue6.Count() > 0)
            {
                queues.Add(currentQueue6);
            }
        }









                Queue<string> queue = queuesBFS[0];
        for (int i = 1; i < queuesBFS.Count; i++)
        {
            Debug.Log(queuesBFS[i].Count + "check 1");
            if (queue.Count > queuesBFS[i].Count)
            {
                Debug.Log(queuesBFS[i].Count + "check 2");
                queue = queuesBFS[i];
            }
        }
        int count = queue.Count;
        //Debug.Log(count);
        for (int i = 0; i < count; i++)
        {
            
            string[] nextstring = queue.Dequeue().Split(',');
            //Debug.Log(nextstring[0] +" "+ nextstring[1] +" "+ nextstring[2]);
            int[] nextLoacion = new int[3] { int.Parse(nextstring[0]), int.Parse(nextstring[1]), int.Parse(nextstring[2]) };
            GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube);
            cube.transform.position = new Vector3(nextLoacion[0] + maze2Offset, nextLoacion[1], nextLoacion[2]);
            cube.GetComponent<Renderer>().material = searchMaterial;
            cube.name = "BFS Search Cube";
            cube.isStatic = true;

        }













         Queue<string> currentQueue1, currentQueue2, currentQueue3, currentQueue4, currentQueue5, currentQueue6;
        List<Queue<string>> queues = new List<Queue<string>>();
        int[] end = maze.getEndLocation();
        queue.Enqueue(current[0] + "," + current[1] + "," + current[2]);
        if (maze.BFSCheck(current[0] + 1, current[1], current[2]) && !queue.Contains((current[0] + 1)+ "," + current[1] + "," + current[2])) // x + 1
        {
            if (end[0] == current[0] + 1 && end[1] == current[1] && end[2] == current[2])
            {
                queue.Enqueue((current[0] +1) + "," + current[1] + "," + current[2]);
                return queue;
            }
            currentQueue1 = BFS(queue, new int[] { current[0] + 1, current[1], current[2] });
            if(currentQueue1.Count() > 0)
            {
                queues.Add(currentQueue1);
            }
        }
        if (maze.BFSCheck(current[0] -1, current[1], current[2]) && !queue.Contains(current[0] + "," + current[1] + "," + current[2])) // x - 1
        {
            if (end[0] == current[0] - 1 && end[1] == current[1] && end[2] == current[2])
            {
                queue.Enqueue((current[0] - 1) + "," + current[1] + "," + current[2]);
                return queue;
            }
            currentQueue2 = BFS(queue, new int[] { current[0] -1, current[1], current[2] });
            if (currentQueue2.Count() > 0)
            {
                queues.Add(currentQueue2);
            }
        }
        if (maze.BFSCheck(current[0], current[1] + 1, current[2]) && !queue.Contains(current[0] + "," + (current[1] + 1) + "," + current[2])) // y + 1
        {
            if (end[0] == current[0] && end[1] == current[1] + 1 && end[2] == current[2])
            {
                queue.Enqueue((current[0]) + "," + (current[1] + 1) + "," + current[2]);
                return queue;
            }
            currentQueue3 = BFS(queue, new int[] { current[0], current[1] + 1, current[2] });
            if (currentQueue3.Count() > 0)
            {
                queues.Add(currentQueue3);
            }
        }
        if (maze.BFSCheck(current[0], current[1] - 1, current[2]) && !queue.Contains(current[0] + "," + (current[1] - 1) + "," + current[2])) // y -1
        {
            if (end[0] == current[0] && end[1] == current[1] - 1 && end[2] == current[2])
            {
                queue.Enqueue((current[0]) + "," + (current[1] - 1) + "," + current[2]);
                return queue;
            }
            currentQueue4 = BFS(queue, new int[] { current[0], current[1] - 1, current[2] });
            if (currentQueue4.Count() > 0)
            {
                queues.Add(currentQueue4);
            }
        }
        if (maze.BFSCheck(current[0], current[1], current[2] + 1) && !queue.Contains(current[0] + "," + current[1] + "," + (current[2] + 1))) // z + 1
        {
            if (end[0] == current[0] && end[1] == current[1] && end[2] == current[2] + 1)
            {
                queue.Enqueue((current[0]) + "," + current[1] + "," + (current[2] + 1));
                return queue;
            }
            currentQueue5 = BFS(queue, new int[] { current[0], current[1], current[2] + 1 });
            if (currentQueue5.Count() > 0)
            {
                queues.Add(currentQueue5);
            }

        }
        if (maze.BFSCheck(current[0], current[1], current[2] - 1) && !queue.Contains(current[0] + "," + current[1] + "," + (current[2] - 1))) // z - 1
        {
            if (end[0] == current[0] && end[1] == current[1] && end[2] == current[2] - 1)
            {
                queue.Enqueue((current[0]) + "," + current[1] + "," + (current[2] - 1));
                return queue;
            }
            currentQueue6 = BFS(queue, new int[] { current[0], current[1], current[2] - 1});
            if (currentQueue6.Count() > 0)
            {
                queues.Add(currentQueue6);
            }
        }
        if(queues.Count() > 0)
        {
            Queue<string> currentQueue = queues[0];
            for(int i =  1; i < queues.Count(); i++)
            {
                if (queues[i].Count() < currentQueue.Count())
                {
                    currentQueue = queues[i];
                }
            }
            return currentQueue;
        }
        else
        {
            return new Queue<string> { };
        }